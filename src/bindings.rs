#![allow(warnings)]
/* automatically generated by rust-bindgen 0.71.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 40;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const FFTW_FORWARD: i32 = -1;
pub const FFTW_BACKWARD: u32 = 1;
pub const FFTW_NO_TIMELIMIT: f64 = -1.0;
pub const FFTW_MEASURE: u32 = 0;
pub const FFTW_DESTROY_INPUT: u32 = 1;
pub const FFTW_UNALIGNED: u32 = 2;
pub const FFTW_CONSERVE_MEMORY: u32 = 4;
pub const FFTW_EXHAUSTIVE: u32 = 8;
pub const FFTW_PRESERVE_INPUT: u32 = 16;
pub const FFTW_PATIENT: u32 = 32;
pub const FFTW_ESTIMATE: u32 = 64;
pub const FFTW_WISDOM_ONLY: u32 = 2097152;
pub const FFTW_ESTIMATE_PATIENT: u32 = 128;
pub const FFTW_BELIEVE_PCOST: u32 = 256;
pub const FFTW_NO_DFT_R2HC: u32 = 512;
pub const FFTW_NO_NONTHREADED: u32 = 1024;
pub const FFTW_NO_BUFFERING: u32 = 2048;
pub const FFTW_NO_INDIRECT_OP: u32 = 4096;
pub const FFTW_ALLOW_LARGE_GENERIC: u32 = 8192;
pub const FFTW_NO_RANK_SPLITS: u32 = 16384;
pub const FFTW_NO_VRANK_SPLITS: u32 = 32768;
pub const FFTW_NO_VRECURSE: u32 = 65536;
pub const FFTW_NO_SIMD: u32 = 131072;
pub const FFTW_NO_SLOW: u32 = 262144;
pub const FFTW_NO_FIXED_RADIX_LARGE_N: u32 = 524288;
pub const FFTW_ALLOW_PRUNING: u32 = 1048576;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub _prevchain: *mut *mut _IO_FILE,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::_prevchain"]
        [::std::mem::offset_of!(_IO_FILE, _prevchain) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_cookie_io_functions_t"]
        [::std::mem::size_of::<_IO_cookie_io_functions_t>() - 32usize];
    ["Alignment of _IO_cookie_io_functions_t"]
        [::std::mem::align_of::<_IO_cookie_io_functions_t>() - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::read"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, read) - 0usize];
    ["Offset of field: _IO_cookie_io_functions_t::write"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, write) - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::seek"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, seek) - 16usize];
    ["Offset of field: _IO_cookie_io_functions_t::close"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, close) - 24usize];
};
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type va_list = __gnuc_va_list;
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
unsafe extern "C" {
    pub static mut stdin: *mut FILE;
}
unsafe extern "C" {
    pub static mut stdout: *mut FILE;
}
unsafe extern "C" {
    pub static mut stderr: *mut FILE;
}
unsafe extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
unsafe extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
unsafe extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
unsafe extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const fftw_r2r_kind_do_not_use_me_FFTW_R2HC: fftw_r2r_kind_do_not_use_me = 0;
pub const fftw_r2r_kind_do_not_use_me_FFTW_HC2R: fftw_r2r_kind_do_not_use_me = 1;
pub const fftw_r2r_kind_do_not_use_me_FFTW_DHT: fftw_r2r_kind_do_not_use_me = 2;
pub const fftw_r2r_kind_do_not_use_me_FFTW_REDFT00: fftw_r2r_kind_do_not_use_me = 3;
pub const fftw_r2r_kind_do_not_use_me_FFTW_REDFT01: fftw_r2r_kind_do_not_use_me = 4;
pub const fftw_r2r_kind_do_not_use_me_FFTW_REDFT10: fftw_r2r_kind_do_not_use_me = 5;
pub const fftw_r2r_kind_do_not_use_me_FFTW_REDFT11: fftw_r2r_kind_do_not_use_me = 6;
pub const fftw_r2r_kind_do_not_use_me_FFTW_RODFT00: fftw_r2r_kind_do_not_use_me = 7;
pub const fftw_r2r_kind_do_not_use_me_FFTW_RODFT01: fftw_r2r_kind_do_not_use_me = 8;
pub const fftw_r2r_kind_do_not_use_me_FFTW_RODFT10: fftw_r2r_kind_do_not_use_me = 9;
pub const fftw_r2r_kind_do_not_use_me_FFTW_RODFT11: fftw_r2r_kind_do_not_use_me = 10;
pub type fftw_r2r_kind_do_not_use_me = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fftw_iodim_do_not_use_me {
    pub n: ::std::os::raw::c_int,
    pub is: ::std::os::raw::c_int,
    pub os: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fftw_iodim_do_not_use_me"]
        [::std::mem::size_of::<fftw_iodim_do_not_use_me>() - 12usize];
    ["Alignment of fftw_iodim_do_not_use_me"]
        [::std::mem::align_of::<fftw_iodim_do_not_use_me>() - 4usize];
    ["Offset of field: fftw_iodim_do_not_use_me::n"]
        [::std::mem::offset_of!(fftw_iodim_do_not_use_me, n) - 0usize];
    ["Offset of field: fftw_iodim_do_not_use_me::is"]
        [::std::mem::offset_of!(fftw_iodim_do_not_use_me, is) - 4usize];
    ["Offset of field: fftw_iodim_do_not_use_me::os"]
        [::std::mem::offset_of!(fftw_iodim_do_not_use_me, os) - 8usize];
};
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fftw_iodim64_do_not_use_me {
    pub n: isize,
    pub is: isize,
    pub os: isize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fftw_iodim64_do_not_use_me"]
        [::std::mem::size_of::<fftw_iodim64_do_not_use_me>() - 24usize];
    ["Alignment of fftw_iodim64_do_not_use_me"]
        [::std::mem::align_of::<fftw_iodim64_do_not_use_me>() - 8usize];
    ["Offset of field: fftw_iodim64_do_not_use_me::n"]
        [::std::mem::offset_of!(fftw_iodim64_do_not_use_me, n) - 0usize];
    ["Offset of field: fftw_iodim64_do_not_use_me::is"]
        [::std::mem::offset_of!(fftw_iodim64_do_not_use_me, is) - 8usize];
    ["Offset of field: fftw_iodim64_do_not_use_me::os"]
        [::std::mem::offset_of!(fftw_iodim64_do_not_use_me, os) - 16usize];
};
pub type fftw_write_char_func_do_not_use_me = ::std::option::Option<
    unsafe extern "C" fn(c: ::std::os::raw::c_char, arg1: *mut ::std::os::raw::c_void),
>;
pub type fftw_read_char_func_do_not_use_me = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type fftw_complex = [f64; 2usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fftw_plan_s {
    _unused: [u8; 0],
}
pub type fftw_plan = *mut fftw_plan_s;
pub type fftw_iodim = fftw_iodim_do_not_use_me;
pub type fftw_iodim64 = fftw_iodim64_do_not_use_me;
pub use self::fftw_r2r_kind_do_not_use_me as fftw_r2r_kind;
pub type fftw_write_char_func = fftw_write_char_func_do_not_use_me;
pub type fftw_read_char_func = fftw_read_char_func_do_not_use_me;
unsafe extern "C" {
    pub fn fftw_execute(p: fftw_plan);
}
unsafe extern "C" {
    pub fn fftw_plan_dft(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        in_: *mut fftw_complex,
        out: *mut fftw_complex,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_dft_1d(
        n: ::std::os::raw::c_int,
        in_: *mut fftw_complex,
        out: *mut fftw_complex,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_dft_2d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        in_: *mut fftw_complex,
        out: *mut fftw_complex,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_dft_3d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
        in_: *mut fftw_complex,
        out: *mut fftw_complex,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_many_dft(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        howmany: ::std::os::raw::c_int,
        in_: *mut fftw_complex,
        inembed: *const ::std::os::raw::c_int,
        istride: ::std::os::raw::c_int,
        idist: ::std::os::raw::c_int,
        out: *mut fftw_complex,
        onembed: *const ::std::os::raw::c_int,
        ostride: ::std::os::raw::c_int,
        odist: ::std::os::raw::c_int,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_guru_dft(
        rank: ::std::os::raw::c_int,
        dims: *const fftw_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftw_iodim,
        in_: *mut fftw_complex,
        out: *mut fftw_complex,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_guru_split_dft(
        rank: ::std::os::raw::c_int,
        dims: *const fftw_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftw_iodim,
        ri: *mut f64,
        ii: *mut f64,
        ro: *mut f64,
        io: *mut f64,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_guru64_dft(
        rank: ::std::os::raw::c_int,
        dims: *const fftw_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftw_iodim64,
        in_: *mut fftw_complex,
        out: *mut fftw_complex,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_guru64_split_dft(
        rank: ::std::os::raw::c_int,
        dims: *const fftw_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftw_iodim64,
        ri: *mut f64,
        ii: *mut f64,
        ro: *mut f64,
        io: *mut f64,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_execute_dft(p: fftw_plan, in_: *mut fftw_complex, out: *mut fftw_complex);
}
unsafe extern "C" {
    pub fn fftw_execute_split_dft(
        p: fftw_plan,
        ri: *mut f64,
        ii: *mut f64,
        ro: *mut f64,
        io: *mut f64,
    );
}
unsafe extern "C" {
    pub fn fftw_plan_many_dft_r2c(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        howmany: ::std::os::raw::c_int,
        in_: *mut f64,
        inembed: *const ::std::os::raw::c_int,
        istride: ::std::os::raw::c_int,
        idist: ::std::os::raw::c_int,
        out: *mut fftw_complex,
        onembed: *const ::std::os::raw::c_int,
        ostride: ::std::os::raw::c_int,
        odist: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_dft_r2c(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        in_: *mut f64,
        out: *mut fftw_complex,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_dft_r2c_1d(
        n: ::std::os::raw::c_int,
        in_: *mut f64,
        out: *mut fftw_complex,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_dft_r2c_2d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        in_: *mut f64,
        out: *mut fftw_complex,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_dft_r2c_3d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
        in_: *mut f64,
        out: *mut fftw_complex,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_many_dft_c2r(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        howmany: ::std::os::raw::c_int,
        in_: *mut fftw_complex,
        inembed: *const ::std::os::raw::c_int,
        istride: ::std::os::raw::c_int,
        idist: ::std::os::raw::c_int,
        out: *mut f64,
        onembed: *const ::std::os::raw::c_int,
        ostride: ::std::os::raw::c_int,
        odist: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_dft_c2r(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        in_: *mut fftw_complex,
        out: *mut f64,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_dft_c2r_1d(
        n: ::std::os::raw::c_int,
        in_: *mut fftw_complex,
        out: *mut f64,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_dft_c2r_2d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        in_: *mut fftw_complex,
        out: *mut f64,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_dft_c2r_3d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
        in_: *mut fftw_complex,
        out: *mut f64,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_guru_dft_r2c(
        rank: ::std::os::raw::c_int,
        dims: *const fftw_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftw_iodim,
        in_: *mut f64,
        out: *mut fftw_complex,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_guru_dft_c2r(
        rank: ::std::os::raw::c_int,
        dims: *const fftw_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftw_iodim,
        in_: *mut fftw_complex,
        out: *mut f64,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_guru_split_dft_r2c(
        rank: ::std::os::raw::c_int,
        dims: *const fftw_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftw_iodim,
        in_: *mut f64,
        ro: *mut f64,
        io: *mut f64,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_guru_split_dft_c2r(
        rank: ::std::os::raw::c_int,
        dims: *const fftw_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftw_iodim,
        ri: *mut f64,
        ii: *mut f64,
        out: *mut f64,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_guru64_dft_r2c(
        rank: ::std::os::raw::c_int,
        dims: *const fftw_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftw_iodim64,
        in_: *mut f64,
        out: *mut fftw_complex,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_guru64_dft_c2r(
        rank: ::std::os::raw::c_int,
        dims: *const fftw_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftw_iodim64,
        in_: *mut fftw_complex,
        out: *mut f64,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_guru64_split_dft_r2c(
        rank: ::std::os::raw::c_int,
        dims: *const fftw_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftw_iodim64,
        in_: *mut f64,
        ro: *mut f64,
        io: *mut f64,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_guru64_split_dft_c2r(
        rank: ::std::os::raw::c_int,
        dims: *const fftw_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftw_iodim64,
        ri: *mut f64,
        ii: *mut f64,
        out: *mut f64,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_execute_dft_r2c(p: fftw_plan, in_: *mut f64, out: *mut fftw_complex);
}
unsafe extern "C" {
    pub fn fftw_execute_dft_c2r(p: fftw_plan, in_: *mut fftw_complex, out: *mut f64);
}
unsafe extern "C" {
    pub fn fftw_execute_split_dft_r2c(p: fftw_plan, in_: *mut f64, ro: *mut f64, io: *mut f64);
}
unsafe extern "C" {
    pub fn fftw_execute_split_dft_c2r(p: fftw_plan, ri: *mut f64, ii: *mut f64, out: *mut f64);
}
unsafe extern "C" {
    pub fn fftw_plan_many_r2r(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        howmany: ::std::os::raw::c_int,
        in_: *mut f64,
        inembed: *const ::std::os::raw::c_int,
        istride: ::std::os::raw::c_int,
        idist: ::std::os::raw::c_int,
        out: *mut f64,
        onembed: *const ::std::os::raw::c_int,
        ostride: ::std::os::raw::c_int,
        odist: ::std::os::raw::c_int,
        kind: *const fftw_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_r2r(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        in_: *mut f64,
        out: *mut f64,
        kind: *const fftw_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_r2r_1d(
        n: ::std::os::raw::c_int,
        in_: *mut f64,
        out: *mut f64,
        kind: fftw_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_r2r_2d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        in_: *mut f64,
        out: *mut f64,
        kind0: fftw_r2r_kind,
        kind1: fftw_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_r2r_3d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
        in_: *mut f64,
        out: *mut f64,
        kind0: fftw_r2r_kind,
        kind1: fftw_r2r_kind,
        kind2: fftw_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_guru_r2r(
        rank: ::std::os::raw::c_int,
        dims: *const fftw_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftw_iodim,
        in_: *mut f64,
        out: *mut f64,
        kind: *const fftw_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_plan_guru64_r2r(
        rank: ::std::os::raw::c_int,
        dims: *const fftw_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftw_iodim64,
        in_: *mut f64,
        out: *mut f64,
        kind: *const fftw_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftw_plan;
}
unsafe extern "C" {
    pub fn fftw_execute_r2r(p: fftw_plan, in_: *mut f64, out: *mut f64);
}
unsafe extern "C" {
    pub fn fftw_destroy_plan(p: fftw_plan);
}
unsafe extern "C" {
    pub fn fftw_forget_wisdom();
}
unsafe extern "C" {
    pub fn fftw_cleanup();
}
unsafe extern "C" {
    pub fn fftw_set_timelimit(t: f64);
}
unsafe extern "C" {
    pub fn fftw_plan_with_nthreads(nthreads: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn fftw_planner_nthreads() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftw_init_threads() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftw_cleanup_threads();
}
unsafe extern "C" {
    pub fn fftw_threads_set_callback(
        parallel_loop: ::std::option::Option<
            unsafe extern "C" fn(
                work: ::std::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut ::std::os::raw::c_char,
                    ) -> *mut ::std::os::raw::c_void,
                >,
                jobdata: *mut ::std::os::raw::c_char,
                elsize: usize,
                njobs: ::std::os::raw::c_int,
                data: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn fftw_make_planner_thread_safe();
}
unsafe extern "C" {
    pub fn fftw_export_wisdom_to_filename(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftw_export_wisdom_to_file(output_file: *mut FILE);
}
unsafe extern "C" {
    pub fn fftw_export_wisdom_to_string() -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fftw_export_wisdom(write_char: fftw_write_char_func, data: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn fftw_import_system_wisdom() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftw_import_wisdom_from_filename(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftw_import_wisdom_from_file(input_file: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftw_import_wisdom_from_string(
        input_string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftw_import_wisdom(
        read_char: fftw_read_char_func,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftw_fprint_plan(p: fftw_plan, output_file: *mut FILE);
}
unsafe extern "C" {
    pub fn fftw_print_plan(p: fftw_plan);
}
unsafe extern "C" {
    pub fn fftw_sprint_plan(p: fftw_plan) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fftw_malloc(n: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn fftw_alloc_real(n: usize) -> *mut f64;
}
unsafe extern "C" {
    pub fn fftw_alloc_complex(n: usize) -> *mut fftw_complex;
}
unsafe extern "C" {
    pub fn fftw_free(p: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn fftw_flops(p: fftw_plan, add: *mut f64, mul: *mut f64, fmas: *mut f64);
}
unsafe extern "C" {
    pub fn fftw_estimate_cost(p: fftw_plan) -> f64;
}
unsafe extern "C" {
    pub fn fftw_cost(p: fftw_plan) -> f64;
}
unsafe extern "C" {
    pub fn fftw_alignment_of(p: *mut f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static fftw_version: [::std::os::raw::c_char; 0usize];
}
unsafe extern "C" {
    pub static fftw_cc: [::std::os::raw::c_char; 0usize];
}
unsafe extern "C" {
    pub static fftw_codelet_optim: [::std::os::raw::c_char; 0usize];
}
pub type fftwf_complex = [f32; 2usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fftwf_plan_s {
    _unused: [u8; 0],
}
pub type fftwf_plan = *mut fftwf_plan_s;
pub type fftwf_iodim = fftw_iodim_do_not_use_me;
pub type fftwf_iodim64 = fftw_iodim64_do_not_use_me;
pub use self::fftw_r2r_kind_do_not_use_me as fftwf_r2r_kind;
pub type fftwf_write_char_func = fftw_write_char_func_do_not_use_me;
pub type fftwf_read_char_func = fftw_read_char_func_do_not_use_me;
unsafe extern "C" {
    pub fn fftwf_execute(p: fftwf_plan);
}
unsafe extern "C" {
    pub fn fftwf_plan_dft(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        in_: *mut fftwf_complex,
        out: *mut fftwf_complex,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_dft_1d(
        n: ::std::os::raw::c_int,
        in_: *mut fftwf_complex,
        out: *mut fftwf_complex,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_dft_2d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        in_: *mut fftwf_complex,
        out: *mut fftwf_complex,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_dft_3d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
        in_: *mut fftwf_complex,
        out: *mut fftwf_complex,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_many_dft(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        howmany: ::std::os::raw::c_int,
        in_: *mut fftwf_complex,
        inembed: *const ::std::os::raw::c_int,
        istride: ::std::os::raw::c_int,
        idist: ::std::os::raw::c_int,
        out: *mut fftwf_complex,
        onembed: *const ::std::os::raw::c_int,
        ostride: ::std::os::raw::c_int,
        odist: ::std::os::raw::c_int,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_guru_dft(
        rank: ::std::os::raw::c_int,
        dims: *const fftwf_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwf_iodim,
        in_: *mut fftwf_complex,
        out: *mut fftwf_complex,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_guru_split_dft(
        rank: ::std::os::raw::c_int,
        dims: *const fftwf_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwf_iodim,
        ri: *mut f32,
        ii: *mut f32,
        ro: *mut f32,
        io: *mut f32,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_guru64_dft(
        rank: ::std::os::raw::c_int,
        dims: *const fftwf_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwf_iodim64,
        in_: *mut fftwf_complex,
        out: *mut fftwf_complex,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_guru64_split_dft(
        rank: ::std::os::raw::c_int,
        dims: *const fftwf_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwf_iodim64,
        ri: *mut f32,
        ii: *mut f32,
        ro: *mut f32,
        io: *mut f32,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_execute_dft(p: fftwf_plan, in_: *mut fftwf_complex, out: *mut fftwf_complex);
}
unsafe extern "C" {
    pub fn fftwf_execute_split_dft(
        p: fftwf_plan,
        ri: *mut f32,
        ii: *mut f32,
        ro: *mut f32,
        io: *mut f32,
    );
}
unsafe extern "C" {
    pub fn fftwf_plan_many_dft_r2c(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        howmany: ::std::os::raw::c_int,
        in_: *mut f32,
        inembed: *const ::std::os::raw::c_int,
        istride: ::std::os::raw::c_int,
        idist: ::std::os::raw::c_int,
        out: *mut fftwf_complex,
        onembed: *const ::std::os::raw::c_int,
        ostride: ::std::os::raw::c_int,
        odist: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_dft_r2c(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        in_: *mut f32,
        out: *mut fftwf_complex,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_dft_r2c_1d(
        n: ::std::os::raw::c_int,
        in_: *mut f32,
        out: *mut fftwf_complex,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_dft_r2c_2d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        in_: *mut f32,
        out: *mut fftwf_complex,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_dft_r2c_3d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
        in_: *mut f32,
        out: *mut fftwf_complex,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_many_dft_c2r(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        howmany: ::std::os::raw::c_int,
        in_: *mut fftwf_complex,
        inembed: *const ::std::os::raw::c_int,
        istride: ::std::os::raw::c_int,
        idist: ::std::os::raw::c_int,
        out: *mut f32,
        onembed: *const ::std::os::raw::c_int,
        ostride: ::std::os::raw::c_int,
        odist: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_dft_c2r(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        in_: *mut fftwf_complex,
        out: *mut f32,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_dft_c2r_1d(
        n: ::std::os::raw::c_int,
        in_: *mut fftwf_complex,
        out: *mut f32,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_dft_c2r_2d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        in_: *mut fftwf_complex,
        out: *mut f32,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_dft_c2r_3d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
        in_: *mut fftwf_complex,
        out: *mut f32,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_guru_dft_r2c(
        rank: ::std::os::raw::c_int,
        dims: *const fftwf_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwf_iodim,
        in_: *mut f32,
        out: *mut fftwf_complex,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_guru_dft_c2r(
        rank: ::std::os::raw::c_int,
        dims: *const fftwf_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwf_iodim,
        in_: *mut fftwf_complex,
        out: *mut f32,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_guru_split_dft_r2c(
        rank: ::std::os::raw::c_int,
        dims: *const fftwf_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwf_iodim,
        in_: *mut f32,
        ro: *mut f32,
        io: *mut f32,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_guru_split_dft_c2r(
        rank: ::std::os::raw::c_int,
        dims: *const fftwf_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwf_iodim,
        ri: *mut f32,
        ii: *mut f32,
        out: *mut f32,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_guru64_dft_r2c(
        rank: ::std::os::raw::c_int,
        dims: *const fftwf_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwf_iodim64,
        in_: *mut f32,
        out: *mut fftwf_complex,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_guru64_dft_c2r(
        rank: ::std::os::raw::c_int,
        dims: *const fftwf_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwf_iodim64,
        in_: *mut fftwf_complex,
        out: *mut f32,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_guru64_split_dft_r2c(
        rank: ::std::os::raw::c_int,
        dims: *const fftwf_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwf_iodim64,
        in_: *mut f32,
        ro: *mut f32,
        io: *mut f32,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_guru64_split_dft_c2r(
        rank: ::std::os::raw::c_int,
        dims: *const fftwf_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwf_iodim64,
        ri: *mut f32,
        ii: *mut f32,
        out: *mut f32,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_execute_dft_r2c(p: fftwf_plan, in_: *mut f32, out: *mut fftwf_complex);
}
unsafe extern "C" {
    pub fn fftwf_execute_dft_c2r(p: fftwf_plan, in_: *mut fftwf_complex, out: *mut f32);
}
unsafe extern "C" {
    pub fn fftwf_execute_split_dft_r2c(p: fftwf_plan, in_: *mut f32, ro: *mut f32, io: *mut f32);
}
unsafe extern "C" {
    pub fn fftwf_execute_split_dft_c2r(p: fftwf_plan, ri: *mut f32, ii: *mut f32, out: *mut f32);
}
unsafe extern "C" {
    pub fn fftwf_plan_many_r2r(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        howmany: ::std::os::raw::c_int,
        in_: *mut f32,
        inembed: *const ::std::os::raw::c_int,
        istride: ::std::os::raw::c_int,
        idist: ::std::os::raw::c_int,
        out: *mut f32,
        onembed: *const ::std::os::raw::c_int,
        ostride: ::std::os::raw::c_int,
        odist: ::std::os::raw::c_int,
        kind: *const fftwf_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_r2r(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        in_: *mut f32,
        out: *mut f32,
        kind: *const fftwf_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_r2r_1d(
        n: ::std::os::raw::c_int,
        in_: *mut f32,
        out: *mut f32,
        kind: fftwf_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_r2r_2d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        in_: *mut f32,
        out: *mut f32,
        kind0: fftwf_r2r_kind,
        kind1: fftwf_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_r2r_3d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
        in_: *mut f32,
        out: *mut f32,
        kind0: fftwf_r2r_kind,
        kind1: fftwf_r2r_kind,
        kind2: fftwf_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_guru_r2r(
        rank: ::std::os::raw::c_int,
        dims: *const fftwf_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwf_iodim,
        in_: *mut f32,
        out: *mut f32,
        kind: *const fftwf_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_plan_guru64_r2r(
        rank: ::std::os::raw::c_int,
        dims: *const fftwf_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwf_iodim64,
        in_: *mut f32,
        out: *mut f32,
        kind: *const fftwf_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftwf_plan;
}
unsafe extern "C" {
    pub fn fftwf_execute_r2r(p: fftwf_plan, in_: *mut f32, out: *mut f32);
}
unsafe extern "C" {
    pub fn fftwf_destroy_plan(p: fftwf_plan);
}
unsafe extern "C" {
    pub fn fftwf_forget_wisdom();
}
unsafe extern "C" {
    pub fn fftwf_cleanup();
}
unsafe extern "C" {
    pub fn fftwf_set_timelimit(t: f64);
}
unsafe extern "C" {
    pub fn fftwf_plan_with_nthreads(nthreads: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn fftwf_planner_nthreads() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftwf_init_threads() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftwf_cleanup_threads();
}
unsafe extern "C" {
    pub fn fftwf_threads_set_callback(
        parallel_loop: ::std::option::Option<
            unsafe extern "C" fn(
                work: ::std::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut ::std::os::raw::c_char,
                    ) -> *mut ::std::os::raw::c_void,
                >,
                jobdata: *mut ::std::os::raw::c_char,
                elsize: usize,
                njobs: ::std::os::raw::c_int,
                data: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn fftwf_make_planner_thread_safe();
}
unsafe extern "C" {
    pub fn fftwf_export_wisdom_to_filename(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftwf_export_wisdom_to_file(output_file: *mut FILE);
}
unsafe extern "C" {
    pub fn fftwf_export_wisdom_to_string() -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fftwf_export_wisdom(
        write_char: fftwf_write_char_func,
        data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn fftwf_import_system_wisdom() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftwf_import_wisdom_from_filename(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftwf_import_wisdom_from_file(input_file: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftwf_import_wisdom_from_string(
        input_string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftwf_import_wisdom(
        read_char: fftwf_read_char_func,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftwf_fprint_plan(p: fftwf_plan, output_file: *mut FILE);
}
unsafe extern "C" {
    pub fn fftwf_print_plan(p: fftwf_plan);
}
unsafe extern "C" {
    pub fn fftwf_sprint_plan(p: fftwf_plan) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fftwf_malloc(n: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn fftwf_alloc_real(n: usize) -> *mut f32;
}
unsafe extern "C" {
    pub fn fftwf_alloc_complex(n: usize) -> *mut fftwf_complex;
}
unsafe extern "C" {
    pub fn fftwf_free(p: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn fftwf_flops(p: fftwf_plan, add: *mut f64, mul: *mut f64, fmas: *mut f64);
}
unsafe extern "C" {
    pub fn fftwf_estimate_cost(p: fftwf_plan) -> f64;
}
unsafe extern "C" {
    pub fn fftwf_cost(p: fftwf_plan) -> f64;
}
unsafe extern "C" {
    pub fn fftwf_alignment_of(p: *mut f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static fftwf_version: [::std::os::raw::c_char; 0usize];
}
unsafe extern "C" {
    pub static fftwf_cc: [::std::os::raw::c_char; 0usize];
}
unsafe extern "C" {
    pub static fftwf_codelet_optim: [::std::os::raw::c_char; 0usize];
}
pub type fftwl_complex = [u128; 2usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fftwl_plan_s {
    _unused: [u8; 0],
}
pub type fftwl_plan = *mut fftwl_plan_s;
pub type fftwl_iodim = fftw_iodim_do_not_use_me;
pub type fftwl_iodim64 = fftw_iodim64_do_not_use_me;
pub use self::fftw_r2r_kind_do_not_use_me as fftwl_r2r_kind;
pub type fftwl_write_char_func = fftw_write_char_func_do_not_use_me;
pub type fftwl_read_char_func = fftw_read_char_func_do_not_use_me;
unsafe extern "C" {
    pub fn fftwl_execute(p: fftwl_plan);
}
unsafe extern "C" {
    pub fn fftwl_plan_dft(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        in_: *mut fftwl_complex,
        out: *mut fftwl_complex,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_dft_1d(
        n: ::std::os::raw::c_int,
        in_: *mut fftwl_complex,
        out: *mut fftwl_complex,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_dft_2d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        in_: *mut fftwl_complex,
        out: *mut fftwl_complex,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_dft_3d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
        in_: *mut fftwl_complex,
        out: *mut fftwl_complex,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_many_dft(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        howmany: ::std::os::raw::c_int,
        in_: *mut fftwl_complex,
        inembed: *const ::std::os::raw::c_int,
        istride: ::std::os::raw::c_int,
        idist: ::std::os::raw::c_int,
        out: *mut fftwl_complex,
        onembed: *const ::std::os::raw::c_int,
        ostride: ::std::os::raw::c_int,
        odist: ::std::os::raw::c_int,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_guru_dft(
        rank: ::std::os::raw::c_int,
        dims: *const fftwl_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwl_iodim,
        in_: *mut fftwl_complex,
        out: *mut fftwl_complex,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_guru_split_dft(
        rank: ::std::os::raw::c_int,
        dims: *const fftwl_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwl_iodim,
        ri: *mut u128,
        ii: *mut u128,
        ro: *mut u128,
        io: *mut u128,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_guru64_dft(
        rank: ::std::os::raw::c_int,
        dims: *const fftwl_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwl_iodim64,
        in_: *mut fftwl_complex,
        out: *mut fftwl_complex,
        sign: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_guru64_split_dft(
        rank: ::std::os::raw::c_int,
        dims: *const fftwl_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwl_iodim64,
        ri: *mut u128,
        ii: *mut u128,
        ro: *mut u128,
        io: *mut u128,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_execute_dft(p: fftwl_plan, in_: *mut fftwl_complex, out: *mut fftwl_complex);
}
unsafe extern "C" {
    pub fn fftwl_execute_split_dft(
        p: fftwl_plan,
        ri: *mut u128,
        ii: *mut u128,
        ro: *mut u128,
        io: *mut u128,
    );
}
unsafe extern "C" {
    pub fn fftwl_plan_many_dft_r2c(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        howmany: ::std::os::raw::c_int,
        in_: *mut u128,
        inembed: *const ::std::os::raw::c_int,
        istride: ::std::os::raw::c_int,
        idist: ::std::os::raw::c_int,
        out: *mut fftwl_complex,
        onembed: *const ::std::os::raw::c_int,
        ostride: ::std::os::raw::c_int,
        odist: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_dft_r2c(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        in_: *mut u128,
        out: *mut fftwl_complex,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_dft_r2c_1d(
        n: ::std::os::raw::c_int,
        in_: *mut u128,
        out: *mut fftwl_complex,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_dft_r2c_2d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        in_: *mut u128,
        out: *mut fftwl_complex,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_dft_r2c_3d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
        in_: *mut u128,
        out: *mut fftwl_complex,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_many_dft_c2r(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        howmany: ::std::os::raw::c_int,
        in_: *mut fftwl_complex,
        inembed: *const ::std::os::raw::c_int,
        istride: ::std::os::raw::c_int,
        idist: ::std::os::raw::c_int,
        out: *mut u128,
        onembed: *const ::std::os::raw::c_int,
        ostride: ::std::os::raw::c_int,
        odist: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_dft_c2r(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        in_: *mut fftwl_complex,
        out: *mut u128,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_dft_c2r_1d(
        n: ::std::os::raw::c_int,
        in_: *mut fftwl_complex,
        out: *mut u128,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_dft_c2r_2d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        in_: *mut fftwl_complex,
        out: *mut u128,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_dft_c2r_3d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
        in_: *mut fftwl_complex,
        out: *mut u128,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_guru_dft_r2c(
        rank: ::std::os::raw::c_int,
        dims: *const fftwl_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwl_iodim,
        in_: *mut u128,
        out: *mut fftwl_complex,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_guru_dft_c2r(
        rank: ::std::os::raw::c_int,
        dims: *const fftwl_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwl_iodim,
        in_: *mut fftwl_complex,
        out: *mut u128,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_guru_split_dft_r2c(
        rank: ::std::os::raw::c_int,
        dims: *const fftwl_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwl_iodim,
        in_: *mut u128,
        ro: *mut u128,
        io: *mut u128,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_guru_split_dft_c2r(
        rank: ::std::os::raw::c_int,
        dims: *const fftwl_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwl_iodim,
        ri: *mut u128,
        ii: *mut u128,
        out: *mut u128,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_guru64_dft_r2c(
        rank: ::std::os::raw::c_int,
        dims: *const fftwl_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwl_iodim64,
        in_: *mut u128,
        out: *mut fftwl_complex,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_guru64_dft_c2r(
        rank: ::std::os::raw::c_int,
        dims: *const fftwl_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwl_iodim64,
        in_: *mut fftwl_complex,
        out: *mut u128,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_guru64_split_dft_r2c(
        rank: ::std::os::raw::c_int,
        dims: *const fftwl_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwl_iodim64,
        in_: *mut u128,
        ro: *mut u128,
        io: *mut u128,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_guru64_split_dft_c2r(
        rank: ::std::os::raw::c_int,
        dims: *const fftwl_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwl_iodim64,
        ri: *mut u128,
        ii: *mut u128,
        out: *mut u128,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_execute_dft_r2c(p: fftwl_plan, in_: *mut u128, out: *mut fftwl_complex);
}
unsafe extern "C" {
    pub fn fftwl_execute_dft_c2r(p: fftwl_plan, in_: *mut fftwl_complex, out: *mut u128);
}
unsafe extern "C" {
    pub fn fftwl_execute_split_dft_r2c(p: fftwl_plan, in_: *mut u128, ro: *mut u128, io: *mut u128);
}
unsafe extern "C" {
    pub fn fftwl_execute_split_dft_c2r(p: fftwl_plan, ri: *mut u128, ii: *mut u128, out: *mut u128);
}
unsafe extern "C" {
    pub fn fftwl_plan_many_r2r(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        howmany: ::std::os::raw::c_int,
        in_: *mut u128,
        inembed: *const ::std::os::raw::c_int,
        istride: ::std::os::raw::c_int,
        idist: ::std::os::raw::c_int,
        out: *mut u128,
        onembed: *const ::std::os::raw::c_int,
        ostride: ::std::os::raw::c_int,
        odist: ::std::os::raw::c_int,
        kind: *const fftwl_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_r2r(
        rank: ::std::os::raw::c_int,
        n: *const ::std::os::raw::c_int,
        in_: *mut u128,
        out: *mut u128,
        kind: *const fftwl_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_r2r_1d(
        n: ::std::os::raw::c_int,
        in_: *mut u128,
        out: *mut u128,
        kind: fftwl_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_r2r_2d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        in_: *mut u128,
        out: *mut u128,
        kind0: fftwl_r2r_kind,
        kind1: fftwl_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_r2r_3d(
        n0: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
        in_: *mut u128,
        out: *mut u128,
        kind0: fftwl_r2r_kind,
        kind1: fftwl_r2r_kind,
        kind2: fftwl_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_guru_r2r(
        rank: ::std::os::raw::c_int,
        dims: *const fftwl_iodim,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwl_iodim,
        in_: *mut u128,
        out: *mut u128,
        kind: *const fftwl_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_plan_guru64_r2r(
        rank: ::std::os::raw::c_int,
        dims: *const fftwl_iodim64,
        howmany_rank: ::std::os::raw::c_int,
        howmany_dims: *const fftwl_iodim64,
        in_: *mut u128,
        out: *mut u128,
        kind: *const fftwl_r2r_kind,
        flags: ::std::os::raw::c_uint,
    ) -> fftwl_plan;
}
unsafe extern "C" {
    pub fn fftwl_execute_r2r(p: fftwl_plan, in_: *mut u128, out: *mut u128);
}
unsafe extern "C" {
    pub fn fftwl_destroy_plan(p: fftwl_plan);
}
unsafe extern "C" {
    pub fn fftwl_forget_wisdom();
}
unsafe extern "C" {
    pub fn fftwl_cleanup();
}
unsafe extern "C" {
    pub fn fftwl_set_timelimit(t: f64);
}
unsafe extern "C" {
    pub fn fftwl_plan_with_nthreads(nthreads: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn fftwl_planner_nthreads() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftwl_init_threads() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftwl_cleanup_threads();
}
unsafe extern "C" {
    pub fn fftwl_threads_set_callback(
        parallel_loop: ::std::option::Option<
            unsafe extern "C" fn(
                work: ::std::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut ::std::os::raw::c_char,
                    ) -> *mut ::std::os::raw::c_void,
                >,
                jobdata: *mut ::std::os::raw::c_char,
                elsize: usize,
                njobs: ::std::os::raw::c_int,
                data: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn fftwl_make_planner_thread_safe();
}
unsafe extern "C" {
    pub fn fftwl_export_wisdom_to_filename(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftwl_export_wisdom_to_file(output_file: *mut FILE);
}
unsafe extern "C" {
    pub fn fftwl_export_wisdom_to_string() -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fftwl_export_wisdom(
        write_char: fftwl_write_char_func,
        data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn fftwl_import_system_wisdom() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftwl_import_wisdom_from_filename(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftwl_import_wisdom_from_file(input_file: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftwl_import_wisdom_from_string(
        input_string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftwl_import_wisdom(
        read_char: fftwl_read_char_func,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fftwl_fprint_plan(p: fftwl_plan, output_file: *mut FILE);
}
unsafe extern "C" {
    pub fn fftwl_print_plan(p: fftwl_plan);
}
unsafe extern "C" {
    pub fn fftwl_sprint_plan(p: fftwl_plan) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fftwl_malloc(n: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn fftwl_alloc_real(n: usize) -> *mut u128;
}
unsafe extern "C" {
    pub fn fftwl_alloc_complex(n: usize) -> *mut fftwl_complex;
}
unsafe extern "C" {
    pub fn fftwl_free(p: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn fftwl_flops(p: fftwl_plan, add: *mut f64, mul: *mut f64, fmas: *mut f64);
}
unsafe extern "C" {
    pub fn fftwl_estimate_cost(p: fftwl_plan) -> f64;
}
unsafe extern "C" {
    pub fn fftwl_cost(p: fftwl_plan) -> f64;
}
unsafe extern "C" {
    pub fn fftwl_alignment_of(p: *mut u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static fftwl_version: [::std::os::raw::c_char; 0usize];
}
unsafe extern "C" {
    pub static fftwl_cc: [::std::os::raw::c_char; 0usize];
}
unsafe extern "C" {
    pub static fftwl_codelet_optim: [::std::os::raw::c_char; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cava_plan {
    pub FFTbassbufferSize: ::std::os::raw::c_int,
    pub FFTmidbufferSize: ::std::os::raw::c_int,
    pub FFTtreblebufferSize: ::std::os::raw::c_int,
    pub number_of_bars: ::std::os::raw::c_int,
    pub audio_channels: ::std::os::raw::c_int,
    pub input_buffer_size: ::std::os::raw::c_int,
    pub rate: ::std::os::raw::c_int,
    pub bass_cut_off_bar: ::std::os::raw::c_int,
    pub treble_cut_off_bar: ::std::os::raw::c_int,
    pub sens_init: ::std::os::raw::c_int,
    pub autosens: ::std::os::raw::c_int,
    pub frame_skip: ::std::os::raw::c_int,
    pub status: ::std::os::raw::c_int,
    pub error_message: [::std::os::raw::c_char; 1024usize],
    pub sens: f64,
    pub framerate: f64,
    pub noise_reduction: f64,
    pub p_bass_l: fftw_plan,
    pub p_bass_r: fftw_plan,
    pub p_mid_l: fftw_plan,
    pub p_mid_r: fftw_plan,
    pub p_treble_l: fftw_plan,
    pub p_treble_r: fftw_plan,
    pub out_bass_l: *mut fftw_complex,
    pub out_bass_r: *mut fftw_complex,
    pub out_mid_l: *mut fftw_complex,
    pub out_mid_r: *mut fftw_complex,
    pub out_treble_l: *mut fftw_complex,
    pub out_treble_r: *mut fftw_complex,
    pub bass_multiplier: *mut f64,
    pub mid_multiplier: *mut f64,
    pub treble_multiplier: *mut f64,
    pub in_bass_r_raw: *mut f64,
    pub in_bass_l_raw: *mut f64,
    pub in_mid_r_raw: *mut f64,
    pub in_mid_l_raw: *mut f64,
    pub in_treble_r_raw: *mut f64,
    pub in_treble_l_raw: *mut f64,
    pub in_bass_r: *mut f64,
    pub in_bass_l: *mut f64,
    pub in_mid_r: *mut f64,
    pub in_mid_l: *mut f64,
    pub in_treble_r: *mut f64,
    pub in_treble_l: *mut f64,
    pub prev_cava_out: *mut f64,
    pub cava_mem: *mut f64,
    pub input_buffer: *mut f64,
    pub cava_peak: *mut f64,
    pub eq: *mut f64,
    pub cut_off_frequency: *mut f32,
    pub FFTbuffer_lower_cut_off: *mut ::std::os::raw::c_int,
    pub FFTbuffer_upper_cut_off: *mut ::std::os::raw::c_int,
    pub cava_fall: *mut f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cava_plan"][::std::mem::size_of::<cava_plan>() - 1392usize];
    ["Alignment of cava_plan"][::std::mem::align_of::<cava_plan>() - 8usize];
    ["Offset of field: cava_plan::FFTbassbufferSize"]
        [::std::mem::offset_of!(cava_plan, FFTbassbufferSize) - 0usize];
    ["Offset of field: cava_plan::FFTmidbufferSize"]
        [::std::mem::offset_of!(cava_plan, FFTmidbufferSize) - 4usize];
    ["Offset of field: cava_plan::FFTtreblebufferSize"]
        [::std::mem::offset_of!(cava_plan, FFTtreblebufferSize) - 8usize];
    ["Offset of field: cava_plan::number_of_bars"]
        [::std::mem::offset_of!(cava_plan, number_of_bars) - 12usize];
    ["Offset of field: cava_plan::audio_channels"]
        [::std::mem::offset_of!(cava_plan, audio_channels) - 16usize];
    ["Offset of field: cava_plan::input_buffer_size"]
        [::std::mem::offset_of!(cava_plan, input_buffer_size) - 20usize];
    ["Offset of field: cava_plan::rate"][::std::mem::offset_of!(cava_plan, rate) - 24usize];
    ["Offset of field: cava_plan::bass_cut_off_bar"]
        [::std::mem::offset_of!(cava_plan, bass_cut_off_bar) - 28usize];
    ["Offset of field: cava_plan::treble_cut_off_bar"]
        [::std::mem::offset_of!(cava_plan, treble_cut_off_bar) - 32usize];
    ["Offset of field: cava_plan::sens_init"]
        [::std::mem::offset_of!(cava_plan, sens_init) - 36usize];
    ["Offset of field: cava_plan::autosens"][::std::mem::offset_of!(cava_plan, autosens) - 40usize];
    ["Offset of field: cava_plan::frame_skip"]
        [::std::mem::offset_of!(cava_plan, frame_skip) - 44usize];
    ["Offset of field: cava_plan::status"][::std::mem::offset_of!(cava_plan, status) - 48usize];
    ["Offset of field: cava_plan::error_message"]
        [::std::mem::offset_of!(cava_plan, error_message) - 52usize];
    ["Offset of field: cava_plan::sens"][::std::mem::offset_of!(cava_plan, sens) - 1080usize];
    ["Offset of field: cava_plan::framerate"]
        [::std::mem::offset_of!(cava_plan, framerate) - 1088usize];
    ["Offset of field: cava_plan::noise_reduction"]
        [::std::mem::offset_of!(cava_plan, noise_reduction) - 1096usize];
    ["Offset of field: cava_plan::p_bass_l"]
        [::std::mem::offset_of!(cava_plan, p_bass_l) - 1104usize];
    ["Offset of field: cava_plan::p_bass_r"]
        [::std::mem::offset_of!(cava_plan, p_bass_r) - 1112usize];
    ["Offset of field: cava_plan::p_mid_l"][::std::mem::offset_of!(cava_plan, p_mid_l) - 1120usize];
    ["Offset of field: cava_plan::p_mid_r"][::std::mem::offset_of!(cava_plan, p_mid_r) - 1128usize];
    ["Offset of field: cava_plan::p_treble_l"]
        [::std::mem::offset_of!(cava_plan, p_treble_l) - 1136usize];
    ["Offset of field: cava_plan::p_treble_r"]
        [::std::mem::offset_of!(cava_plan, p_treble_r) - 1144usize];
    ["Offset of field: cava_plan::out_bass_l"]
        [::std::mem::offset_of!(cava_plan, out_bass_l) - 1152usize];
    ["Offset of field: cava_plan::out_bass_r"]
        [::std::mem::offset_of!(cava_plan, out_bass_r) - 1160usize];
    ["Offset of field: cava_plan::out_mid_l"]
        [::std::mem::offset_of!(cava_plan, out_mid_l) - 1168usize];
    ["Offset of field: cava_plan::out_mid_r"]
        [::std::mem::offset_of!(cava_plan, out_mid_r) - 1176usize];
    ["Offset of field: cava_plan::out_treble_l"]
        [::std::mem::offset_of!(cava_plan, out_treble_l) - 1184usize];
    ["Offset of field: cava_plan::out_treble_r"]
        [::std::mem::offset_of!(cava_plan, out_treble_r) - 1192usize];
    ["Offset of field: cava_plan::bass_multiplier"]
        [::std::mem::offset_of!(cava_plan, bass_multiplier) - 1200usize];
    ["Offset of field: cava_plan::mid_multiplier"]
        [::std::mem::offset_of!(cava_plan, mid_multiplier) - 1208usize];
    ["Offset of field: cava_plan::treble_multiplier"]
        [::std::mem::offset_of!(cava_plan, treble_multiplier) - 1216usize];
    ["Offset of field: cava_plan::in_bass_r_raw"]
        [::std::mem::offset_of!(cava_plan, in_bass_r_raw) - 1224usize];
    ["Offset of field: cava_plan::in_bass_l_raw"]
        [::std::mem::offset_of!(cava_plan, in_bass_l_raw) - 1232usize];
    ["Offset of field: cava_plan::in_mid_r_raw"]
        [::std::mem::offset_of!(cava_plan, in_mid_r_raw) - 1240usize];
    ["Offset of field: cava_plan::in_mid_l_raw"]
        [::std::mem::offset_of!(cava_plan, in_mid_l_raw) - 1248usize];
    ["Offset of field: cava_plan::in_treble_r_raw"]
        [::std::mem::offset_of!(cava_plan, in_treble_r_raw) - 1256usize];
    ["Offset of field: cava_plan::in_treble_l_raw"]
        [::std::mem::offset_of!(cava_plan, in_treble_l_raw) - 1264usize];
    ["Offset of field: cava_plan::in_bass_r"]
        [::std::mem::offset_of!(cava_plan, in_bass_r) - 1272usize];
    ["Offset of field: cava_plan::in_bass_l"]
        [::std::mem::offset_of!(cava_plan, in_bass_l) - 1280usize];
    ["Offset of field: cava_plan::in_mid_r"]
        [::std::mem::offset_of!(cava_plan, in_mid_r) - 1288usize];
    ["Offset of field: cava_plan::in_mid_l"]
        [::std::mem::offset_of!(cava_plan, in_mid_l) - 1296usize];
    ["Offset of field: cava_plan::in_treble_r"]
        [::std::mem::offset_of!(cava_plan, in_treble_r) - 1304usize];
    ["Offset of field: cava_plan::in_treble_l"]
        [::std::mem::offset_of!(cava_plan, in_treble_l) - 1312usize];
    ["Offset of field: cava_plan::prev_cava_out"]
        [::std::mem::offset_of!(cava_plan, prev_cava_out) - 1320usize];
    ["Offset of field: cava_plan::cava_mem"]
        [::std::mem::offset_of!(cava_plan, cava_mem) - 1328usize];
    ["Offset of field: cava_plan::input_buffer"]
        [::std::mem::offset_of!(cava_plan, input_buffer) - 1336usize];
    ["Offset of field: cava_plan::cava_peak"]
        [::std::mem::offset_of!(cava_plan, cava_peak) - 1344usize];
    ["Offset of field: cava_plan::eq"][::std::mem::offset_of!(cava_plan, eq) - 1352usize];
    ["Offset of field: cava_plan::cut_off_frequency"]
        [::std::mem::offset_of!(cava_plan, cut_off_frequency) - 1360usize];
    ["Offset of field: cava_plan::FFTbuffer_lower_cut_off"]
        [::std::mem::offset_of!(cava_plan, FFTbuffer_lower_cut_off) - 1368usize];
    ["Offset of field: cava_plan::FFTbuffer_upper_cut_off"]
        [::std::mem::offset_of!(cava_plan, FFTbuffer_upper_cut_off) - 1376usize];
    ["Offset of field: cava_plan::cava_fall"]
        [::std::mem::offset_of!(cava_plan, cava_fall) - 1384usize];
};
unsafe extern "C" {
    pub fn cava_init(
        number_of_bars: ::std::os::raw::c_int,
        rate: ::std::os::raw::c_uint,
        channels: ::std::os::raw::c_int,
        autosens: ::std::os::raw::c_int,
        noise_reduction: f64,
        low_cut_off: ::std::os::raw::c_int,
        high_cut_off: ::std::os::raw::c_int,
    ) -> *mut cava_plan;
}
unsafe extern "C" {
    pub fn cava_execute(
        cava_in: *mut f64,
        new_samples: ::std::os::raw::c_int,
        cava_out: *mut f64,
        plan: *mut cava_plan,
    );
}
unsafe extern "C" {
    pub fn cava_destroy(plan: *mut cava_plan);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
